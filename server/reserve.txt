# ГОЛОВНА ІДЕЯ СЕРВЕРА:
# 1. Прийняв джсон через MQTT брокер
# 2. Розпарсив
# 3. Обробив дані алгоритмами іф елсе і там якісь міні висновки
# 4. Великий висновок за допомогою тренованої нейронки (для початку можеш замокати повідомлення ткпим текстом)
# 5. Записав у БД (мб монго та не обовязково) висновки та дані з сенсорів
# 6. Це все надіслав на фронтенд черз HTTP

from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl
import paho.mqtt.client as mqtt
import threading
import json

app = FastAPI()

MQTT_BROKER = "192.168.31.108"
MQTT_PORT = 1883
MQTT_TOPIC = "device/sensors/data"
MQTT_CLIENT_ID = "fastapi-mqtt-server"

class SensorData(BaseModel):
    temperature: float
    airPPM: int
    lightLux: int
    presence: bool
    presenceDistance: float
    motion: bool
    noiseDB: int
    vibration: bool
    fireScore: float
    fireDetected: bool
    gasScore: float
    gasDetected: bool
    humanScore: int
    humanDetected: bool
    damageScore: float
    damageDetected: bool
    translationURL: HttpUrl

class SensorAnalysisResult:
    # Stores raw data and generated conclusions.
    def __init__(self, data: SensorData):
        self.data = data
        self.single_sensor_insights: list[str] = []
        self.combined_sensor_insights: list[str] = []

    def add_single(self, insight: str):
        self.single_sensor_insights.append(insight)

    def add_combined(self, insight: str):
        self.combined_sensor_insights.append(insight)


def analyze_single_sensors(data: SensorData, result: SensorAnalysisResult):
    # Temperature insights
    if data.temperature < 0:
        result.add_single("Temperature is extremely low (below freezing).")
    elif data.temperature < 10:
        result.add_single("Temperature is low; it may feel cold.")
    elif data.temperature < 18:
        result.add_single("Temperature is cool but acceptable.")
    elif data.temperature < 25:
        result.add_single("Temperature is within the comfortable range.")
    elif data.temperature < 30:
        result.add_single("Temperature is warm; monitor for overheating.")
    elif data.temperature < 40:
        result.add_single("Temperature is high; risk of heat exhaustion.")
    else:
        result.add_single("Temperature is extremely high; risk of heat stroke.")

    # Air quality (PPM)
    if data.airPPM < 350:
        result.add_single("Air quality is excellent.")
    elif data.airPPM < 600:
        result.add_single("Air quality is good.")
    elif data.airPPM < 1000:
        result.add_single("Air quality is moderate.")
    elif data.airPPM < 1500:
        result.add_single("Air quality is unhealthy for sensitive groups.")
    else:
        result.add_single("Air quality is poor; consider ventilation.")

    # Light level
    if data.lightLux < 5:
        result.add_single("Lighting is very low; environment is dark.")
    elif data.lightLux < 50:
        result.add_single("Lighting is dim; low visibility.")
    elif data.lightLux < 300:
        result.add_single("Lighting is moderate; comfortable for tasks.")
    elif data.lightLux < 1000:
        result.add_single("Lighting is bright; suitable for most activities.")
    else:
        result.add_single("Lighting is bright; sufficient for reading or work.")

    # Noise level
    if data.noiseDB < 30:
        result.add_single("Noise level is very low; quiet environment.")
    elif data.noiseDB < 60:
        result.add_single("Noise level is moderate.")
    elif data.noiseDB < 85:
        result.add_single("Noise level is high; may be disturbing.")
    else:
        result.add_single("Noise level is very high.")

    # Presence and distance
    if data.presence:
        if data.presenceDistance < 1.0:
            result.add_single("Presence detected very close (<1m).")
        elif data.presenceDistance < 3.0:
            result.add_single("Presence detected at moderate distance.")
        else:
            result.add_single("Presence detected but far away.")
    else:
        result.add_single("No presence detected.")

    # Motion
    result.add_single("Motion detected." if data.motion else "No motion detected.")

    # Vibration
    result.add_single("Vibration detected." if data.vibration else "No vibration detected.")


def analyze_combined_sensors(data: SensorData, result: SensorAnalysisResult):
    # Fire detection: combine temperature, gas, light, and fireScore
    fire_factor = 0
    if data.temperature > 40:
        fire_factor += 1
    if data.gasScore > 0.5:
        fire_factor += 1
    if data.lightLux > 500:
        fire_factor += 1
    if data.fireDetected:
        fire_factor += 2

    if fire_factor >= 4:
        result.add_combined("Possible fire outbreak; immediate action required.")
    elif fire_factor >= 2:
        result.add_combined("Conditions indicate potential fire risk.")
    else:
        result.add_combined("No significant fire indicators.")

    # Air pollution: gasScore and airPPM
    if data.gasDetected or data.gasScore > 0.7:
        result.add_combined("High probability of hazardous gas presence.")
    elif data.airPPM > 1200:
        result.add_combined("Elevated particulate levels; air pollution risk.")
    else:
        result.add_combined("Air pollution levels are within acceptable range.")

    # Human presence: presence, motion, distance, noise, humanScore
    human_factor = 0
    if data.humanDetected:
        human_factor += 2
    if data.presence:
        human_factor += 1
    if data.motion:
        human_factor += 1
    if data.humanScore > 50:
        human_factor += 1
    if data.noiseDB > 50:
        human_factor += 1
    if data.presenceDistance < 2:
        human_factor += 1

    if human_factor >= 5:
        result.add_combined("Strong evidence of human presence detected.")
    elif human_factor >= 3:
        result.add_combined("Possible human presence in the area.")
    else:
        result.add_combined("No clear human presence detected.")

    # Structural damage: presence, distance, vibration, damageScore
    damage_factor = 0
    if data.damageDetected:
        damage_factor += 2
    if data.vibration:
        damage_factor += 1
    if data.damageScore > 0.5:
        damage_factor += 1
    if data.presence and data.presenceDistance < 1.5:
        damage_factor += 1

    if damage_factor >= 4:
        result.add_combined("Potential structural damage detected; inspect immediately.")
    elif damage_factor >= 2:
        result.add_combined("Signs of possible damage; monitor closely.")
    else:
        result.add_combined("No structural damage suspected.")

def print_sensor_data(data: SensorData, result: SensorAnalysisResult):
    print("\nIncoming Sensor Data:")
    for field, value in data.dict().items():
        print(f"{field}: {value}")

    print("\nSensor-based Insights:")
    for insight in result.single_sensor_insights:
        print(f"- {insight}")

    print("\nCombined Sensor Interpretations:")
    for insight in result.combined_sensor_insights:
        print(f"* {insight}")
    print("\n" + "-" * 50 + "\n")

def on_connect(client, userdata, flags, rc):
    print("Connected to MQTT broker with result code", rc)
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, msg):
    try:
        payload_str = msg.payload.decode()
        data = json.loads(payload_str)
        sensor_data = SensorData(**data)

        result = SensorAnalysisResult(sensor_data)
        analyze_single_sensors(sensor_data, result)
        analyze_combined_sensors(sensor_data, result)
        print_sensor_data(sensor_data, result)

        # The `result` object contains all insights for further processing

    except json.JSONDecodeError as e:
        print("JSON decode error:", e)
    except Exception as e:
        print("Parsing error:", e)

def start_mqtt():
    client = mqtt.Client(client_id=MQTT_CLIENT_ID)
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_forever()

@app.on_event("startup")
def startup_event():
    mqtt_thread = threading.Thread(target=start_mqtt)
    mqtt_thread.daemon = True
    mqtt_thread.start()

# uvicorn main:app --host 0.0.0.0 --port 8000